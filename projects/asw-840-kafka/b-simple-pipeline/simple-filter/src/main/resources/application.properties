# non eseguire come applicazione web 
spring.main.web-application-type=NONE 

# MESSAGING 
asw.kafka.filter.name=Filter
asw.kafka.channel.in=asw.alpha
asw.kafka.channel.out=asw.beta
asw.kafka.groupid=simple-filter

# KAFKA
spring.kafka.bootstrap-servers=${DOCKER_HOST_IP:10.11.1.121}:9092

# KAFKA CONSUMER 
spring.kafka.consumer.group-id=${asw.kafka.groupid}
# spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.auto-offset-reset=latest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*

# KAFKA PRODUCER 
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# ai soli fini degli esperimenti, è utile ripartire i singoli messaggi tra le partizioni in modo individuale (anziché batch)  
# modo 1: disabilita l'invio di messaggi in batch 
spring.kafka.producer.batch-size=0
# modo 2: usa il partizionatore round-robin (che però ignora le chiavi dei record) 
# spring.kafka.producer.properties.partitioner.class=org.apache.kafka.clients.producer.RoundRobinPartitioner